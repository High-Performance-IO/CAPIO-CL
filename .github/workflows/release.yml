name: "Release new version"
on:
  workflow_run:
    workflows:
      - "Python Bindings Unit Tests"
    branches:
      - main
    types:
      - completed

jobs:

  check-tag-existance:
    name: "Check if tag exists"
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.check-tag.outputs.exists }}
    steps:
      - uses: actions/checkout@v4
      - name: "Get CAPIO-CL version"
        run: echo "CAPIO_CL_VERSION=$(grep -E 'VERSION [0-9]+\.[0-9]+\.[0-9]+' CMakeLists.txt | awk '{print $2}')" >> $GITHUB_ENV
      - name: "Check if tag exists"
        id: check-tag
        uses: mukunku/tag-exists-action@v1.6.0
        with:
          tag: "v${{ env.CAPIO_CL_VERSION }}"

  build-macos-ubuntu-wheels:
    name: "Build python Wheels"
    if: ${{ needs.check-tag-existance.outputs.exists == 'false' }}
    needs:
      - check-tag-existance
    strategy:
      matrix:
        os: [ 'ubuntu-latest', 'macos-latest', 'macos-15-intel' ]
        python: [ '3.10', '3.11', '3.12', '3.13', '3.14' ]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: "Set up Python"
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python }}

      # Install platform build dependencies
      - name: "Install system packages (Ubuntu)"
        if: startsWith(matrix.on, 'ubuntu-')
        run: sudo apt-get update && sudo apt-get install -y ninja-build g++ cmake

      - name: "Setup Homebrew (macOS)"
        if: startsWith(matrix.on, 'macos-')
        uses: Homebrew/actions/setup-homebrew@main

      - name: "Install system packages (macOS)"
        if: startsWith(matrix.on, 'macos-')
        run: brew install ninja gcc cmake

      # Install Python build dependencies
      - name: "Build Python wheel"
        run: |
          mkdir -p /tmp/capio_cl_jsons
          cp tests/jsons/*.json /tmp/capio_cl_jsons
          python -m pip install --upgrade pip
          python -m pip install -r build-requirements.txt

          python -m build                               \
              -Ccmake.define.ENABLE_COVERAGE=ON         \
              -Ccmake.build-type=Debug                  \
              -Ccmake.define.CAPIO_CL_BUILD_TESTS=OFF

          mv dist/*.whl dist/py_capio_cl_${{matrix.os}}_python_${{matrix.python}}.whl

      - name: "Upload artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ format('py_capio_cl_{0}_python_{1}.whl', matrix.os, matrix.python) }}
          path: "dist/${{ format('py_capio_cl_{0}_python_{1}.whl', matrix.os, matrix.python) }}"
          retention-days: 1
          if-no-files-found: error

  riscv-wheels:
    name: "Build RiscV Ubuntu python wheels"
    if: ${{ needs.check-tag-existance.outputs.exists == 'false' }}
    needs:
      - check-tag-existance
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [ '3.10', '3.11', '3.12', '3.13', '3.14' ]

    env:
      INSTALL_PREFIX: "/usr/local"
      PYTHON_VERSION: "${{ matrix.python }}"

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Build and test inside RISC-V emulated environment (Debian based)"
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: riscv64
          distro: ubuntu22.04
          githubToken: ${{ github.token }}

          install: |
            apt-get update
            DEBIAN_FRONTEND=noninteractive apt-get install -y \
              python3 python3-pip python3-venv python3-wheel python3-setuptools \
              g++ cmake ninja-build git

          run: |
            set -eux
            echo "Building for RISC-V on Ubuntu 22.04"

            python3 -m pip install --upgrade pip
            python3 -m pip install -r build-requirements.txt

            mkdir -p /tmp/capio_cl_jsons
            cp tests/jsons/*.json /tmp/capio_cl_jsons

            python3 -m build \
              -Ccmake.define.ENABLE_COVERAGE=OFF \
              -Ccmake.build-type=Release \
              -Ccmake.define.CAPIO_CL_BUILD_TESTS=OFF
            
            mv dist/*.whl dist/py_capio_cl_ubunturv64_python_${{matrix.python}}.whl

      - name: "Upload built RISC-V wheel"
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: "${{ format('py_capio_cl_ubunturv64_python_{0}.whl', matrix.python) }}"
          path: "dist/${{ format('py_capio_cl_ubunturv64_python_{0}.whl', matrix.python) }}"

  generate-documentation:
    name: "Build documentation"
    needs:
      - check-tag-existance
    if: ${{ needs.check-tag-existance.outputs.exists == 'false' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: "Install packages"
        run: |
          sudo apt update
          sudo apt install wget make graphviz texlive texlive-latex-extra
      - name: "Install Doxygen 1.14.0"
        run: |
          wget https://www.doxygen.nl/files/doxygen-1.14.0.linux.bin.tar.gz
          tar -xzf doxygen-1.14.0.linux.bin.tar.gz
          sudo mv doxygen-1.14.0/bin/doxygen /usr/local/bin/doxygen
          doxygen --version
      - name: "Run Doxygen"
        working-directory: doxygen
        run: make pdf
      - name: "Upload pdf documentation"
        if: success()
        uses: actions/upload-artifact@v4
        with:
          path: "documentation*.pdf"
          name: "documentation.pdf"



  github:
    name: "Create GitHub Release"
    if: ${{ needs.check-tag-existance.outputs.exists == 'false' && github.event.workflow_run.conclusion == 'success' }}
    needs: [ riscv-wheels, build-macos-ubuntu-wheels, generate-documentation ]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: "Download built wheel artifacts"
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: "Create GitHub Release"
        if: ${{ steps.check-tag.outputs.exists == 'false' }}
        uses: softprops/action-gh-release@v2
        with:
          name: "v${{ env.CAPIO_CL_VERSION }}"
          tag_name: "v${{ env.CAPIO_CL_VERSION }}"
          generate_release_notes: true
          files: dist/**/py_capio_cl_*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
